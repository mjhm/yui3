<div class="intro">
<p>
The YUI App Framework is a rollup of the [[#app-component|App]], <a href="../model/index.html">Model</a>, <a href="../model-list/index.html">Model List</a>, <a href="../router/index.html">Router</a>, and <a href="../view/index.html">View</a> components, combined to form a simple MVC-style framework for writing single-page JavaScript applications.
</p>

<p>
You can use these components separately or together to create anything from simple non-interactive views to rich applications with URL-based routing, data binding, and full client-server synchronization.
</p>

<p>
If you've used <a href="http://www.documentcloud.org/">DocumentCloud</a>'s excellent <a href="http://documentcloud.github.com/backbone/">Backbone.js</a> framework, many of the classes and APIs provided by App Framework components will look familiar to you. There are important differences, though, and the App Framework takes full advantage of YUI's powerful component and event infrastructure under the hood.
</p>
</div>

{{>getting-started}}

<h2>Components of the App Framework</h2>

<p>
The `app` module is a rollup module consisting of the following individual components. These components may also be used individually if you don't need all of them at the same time.
</p>

<table>
  <thead>
    <tr>
      <th>Component</th>
      <th>Module</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[[#app-component|App]]</td>
      <td style="white-space: nowrap;">`app-base`</td>
      <td>
        <p>
        Provides a top-level application component which manages navigation and views. This gives you a foundation and structure on which to build your application; it combines robust URL navigation with powerful routing and flexible view management.
        </p>
      </td>
    </tr>

    <tr>
      <td><a href="../model/index.html">Model</a></td>
      <td>`model`</td>
      <td>
        <p>
        A lightweight <a href="{{apiDocs}}/classes/Attribute.html">`Y.Attribute`</a>-based data model with APIs for getting, setting, validating, and syncing attribute values to a persistence layer or server, as well as events for notifying subscribers of model changes.
        </p>
      </td>
    </tr>

    <tr>
      <td><a href="../model-list/index.html">Model List</a></td>
      <td style="white-space: nowrap;">`model-list`</td>
      <td>
        <p>
        An array-like ordered list of `Y.Model` instances with APIs for adding, removing, sorting, filtering, and performing other actions on models in the list. Acts as a bubble target for events fired by the models in the list.
        </p>
      </td>
    </tr>

    <tr>
      <td><a href="../router/index.html">Router</a></td>
      <td>`router`</td>
      <td>
        <p>
        Provides URL-based same-page routing using <a href="https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history">HTML5 history</a> (`pushState`) or the location hash, depending on what the user's browser supports.
        </p>
      </td>
    </tr>

    <tr>
      <td><a href="../view/index.html">View</a></td>
      <td>`view`</td>
      <td>
        <p>
        Represents a piece of an application's user interface and is responsible for rendering content and handling DOM events. Views are commonly associated with Models or Model Lists and are re-rendered when they change, although this isn't required.
        </p>
      </td>
    </tr>
  </tbody>
</table>

<h2>App Component</h2>

<p>
App is a high-level component that builds upon other components in the App Framework. The App component is composed of <a href="../router/index.html">Router</a> and <a href="../view/index.html">View</a>, and also the <a href="../pjax/index.html">Pjax</a> utility. This combination creates a solid foundation and structure on which to build your application. It connects together robust URL navigation with powerful routing and flexible view management.
</p>

<p>
The goal of the App component is to provide you a place to organize and connect together the parts of your application. App implements infrastructural pieces which are common to all apps — such as managing views and the navigation between pages — allowing you to focus on the specifics of <em>your</em> app.
</p>

<p>
App will enable you to seamlessly enhance the user experience and performance of traditional client/server apps. It enable you to create richer interactions without compromising standard browser behavior, URLs, or search engine craw-ability. The [[#Routing Coordination with Server]] and [[#Progressively-Enhanced Apps]] sections of this guide contain details and best practices on accomplishing this.
</p>

<p>
You can also use the App component to build client-only apps for when there is no server, or the server is not capable of routing and handling requests. There are <strong>drawbacks to client-only apps</strong> which you need to be aware of and fully understand their implications. Be sure to read the [[#Client-Only Apps]] section which contains details on these drawbacks and best practices.
</p>

<p>
The remaining sections of this guide provide details on what you'll need to know to start working with the App component. Refer to the previous section for information about the [[#Components of the App Framework|other components of the App Framework]].
</p>

<h2>Using App</h2>

<h3>Instantiating App</h3>

<p>
Creating an App instance couldn't be any simpler:
</p>

```
var app = new Y.App();
```

<p>
Two instantiable classes are provided by the `app-base` module: `Y.App`, and `Y.App.Base`. The difference between these is that `Y.App.Base` provides the basic app functionality and will remain pure; whereas `Y.App` (which extends `Y.App.Base`) will have all of the app-component extensions automatically mixed-in when they are included in the YUI instance.
</p>

<p>
In the following example, we are including both the `app-base` and `app-transitions` modules. When the `app-transitions` module is added to the YUI instance it will automatically mix itself into the `Y.App` class, adding transitions to all `Y.App` instances, but `Y.App.Base` will remain unaffected by the inclusion of this module.
</p>

```
YUI().use('app-base', 'app-transitions', function (Y) {
    // This will create two YUI Apps, `basicApp` will not have transitions,
    // but `fancyApp` will have transitions support included and turn itself on.
    var basicApp = new Y.App.Base(),
        fancyApp = new Y.App({transitions: true});
});
```

<p>
While App instances are usable without any configuration, any non-trivial app will need to be configured. You might also want to extend `Y.App` by mixing-in additional functionality, or even create a custom App class to implement the specific features of your application. The [[#Extending `Y.App`]] section explains how to do this.
</p>

<h4>Config Properties</h4>

<p>
When constructing a new `Y.App` instance you can provide a config object with initial values for [[#app-attributes|attributes]] along with values for <a href="../view/index.html#view-properties">`Y.View`'s properties</a> and <a href="../api/classes/Base.html">`Y.Base`'s "special" properties</a> (used only during initialization). In addition to these, the following non-attribute properties have specific initialization logic applied and can be passed to the `Y.App` constructor:
</p>

<dl>
  <dt>`views`</dt>
  <dd>
    <p>
    Hash of view-name to metadata used to declaratively describe an application's views and their relationship with the app and its other views. The views specified here will override any defaults provided by the `views` object on the `prototype`. See the [[#App Properties]] and [[#Declaring Views]] sections for more details.
    </p>
  </dd>
</dl>

<p>
Here's an example that defines some `views` at instantiation time:
</p>

```
var app = new Y.App({
    views: {
        home : {preserve: true},
        users: {preserve: true},
        user : {parent: 'users'}
    }
});
```

<h3>App Properties</h3>

<p>
The following properties are meaningful to App classes and subclasses. In addition to these, <a href="../view/index.html#view-properties">View's properties</a> are also applicable `Y.View` is part of App's composition.
</p>

<table>
  <thead>
    <tr>
      <th>Property</th>
      <th>Default Value</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>`views`</td>
      <td>`{}`</td>
      <td>
        <p>
        Hash of view-name to metadata used to declaratively describe an application's views and their relationship with the app and its other views. See [[#Declaring Views]] for more details.
        </p>

        <p>
        The view metadata is composed of Objects keyed to a view-name that can have any or all of the following properties:
        </p>

        <dl style="margin-top:1em">
          <dt>`type`</dt>
          <dd>
            <p>
            Function or a string representing the view constructor to use to create view instances. If a string is used, the constructor function is assumed to be on the `Y` object; e.g. `"SomeView"` -> `Y.SomeView`.
            </p>
          </dd>

          <dt>`preserve`</dt>
          <dd>
            <p>
            Boolean for whether the view instance should be retained. By default, the view instance will be destroyed when it is no longer the `activeView`. If `true` the view instance will simply be `removed()` from the DOM when it is no longer active. This is useful when the view is frequently used and may be expensive to re-create.
            </p>
          </dd>

          <dt>`parent`</dt>
          <dd>
            <p>
            String to another named view in this hash that represents the parent view within the application's view hierarchy; e.g. a `"photo"` view could have `"album"` has its `parent` view. This parent/child relationship is a useful cue for things like transitions.
            </p>
          </dd>

          <dt>`instance`</dt>
          <dd>
            <p>
            Used internally to manage the current instance of this named view. This can be used if your view instance is created up-front, or if you would rather manage the View lifecycle, but you probably should just let this be handled for you.
            </p>
          </dd>
        </dl>
      </td>
    </tr>
  </tbody>
</table>

<p>
The App class uses both properties and attributes. Properties are best when their stored data might be useful to multiple App instances, whereas attributes are best when the data being stored only pertains to a single instance.
</p>

<h3>App Attributes</h3>

<p>
App is composed of <a href="../view/index.html#view-attributes">View</a>, <a href="../router/index.html#config-attributes">Router</a>, and <a href="../pjax/index.html">Pjax</a>, all of which provide attributes that will be of interest to you — beyond these, App adds the following attributes:
</p>

<table>
  <thead>
    <tr>
      <th>Attribute</th>
      <th>Default Value</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>`activeView`</td>
      <td>`null`</td>
      <td>
        <p>
        The application's active/visible view. This attribute is read-only, to set the `activeView` use the `showView()` method.
        </p>

        <p>
        See [[#Switching the Active View]] for more details.
        </p>
      </td>
    </tr>

    <tr>
      <td>`serverRouting`</td>
      <td>`undefined`</td>
      <td>
        <p>
        Whether or not this application's server is capable of properly routing all requests and rendering the initial state in the HTML responses.
        </p>

        <p>
        This can have three different values, each having particular implications on how the app will handle routing and navigation:
        </p>

        <dl style="margin-top:1em">
          <dt>`undefined`</dt>
          <dd>
            <p>
            The best form of URLs will be chosen based on the capabilities of the browser. Given no information about the server environment, a balanced approach to routing and navigation is chosen. See [[#Routing Coordination with Server]] for more details.
            </p>
          </dd>

          <dt>`true`</dt>
          <dd>
            <p>
            The server is <em>fully</em> capable of properly handling requests to all full-path URLs the app can produce.
            </p>

            <p>
            This is the best option for progressive-enhancement because it will cause <strong>all URLs to always have full-paths</strong>, which means the server will be able to accurately handle all URLs this app produces. See [[#Progressively-Enhanced Apps]] and [[#Routing Coordination with Server]] for more details.
            </p>
          </dd>

          <dt>`false`</dt>
          <dd>
            <p>
            The server is <em>not</em> capable of properly handling requests to all full-path URLs the app can produce, therefore <em>all</em> routing will be handled by this App instance.
            </p>

            <p>
            Be aware that this will cause <strong>all URLs to always be hash-based</strong>, even in browsers that are capable of using HTML5 history. Please make sure you fully understand the implications of client-only apps. See [[#Client-Only Apps]] and [[#Routing Coordination with Server]] for more details.
            </p>
          </dd>
        </dl>
      </td>
    </tr>

    <tr>
      <td>`viewContainer`</td>
      <td>`<div>` Node</td>
      <td>
        <p>
        The node into which this app's `views` will be rendered when they become the `activeView`.
        </p>

        <p>
        The view container node serves as the container to hold the app's `activeView`. Each time the `activeView` is set via `showView()`, the previous view will be removed from this node, and the new active view's `container` node will be appended.
        </p>

        <p>
        The default view container is a `<div>` Node, but you can override this in a subclass, or by passing in a custom `viewContainer` config value at instantiation time.
        </p>

        <p>
        When `viewContainer` is overridden by a subclass or passed as a config option at instantiation time, it may be provided as a selector string, DOM element, or a `Y.Node` instance. Using the same node as the `viewContainer` and the `container` is also supported.
        </p>

        <p>
        The app's `render()` method will stamp the view container with the CSS class "yui3-app-views" and append the view container to the app's `container` node if it isn't there already. Any `activeView` will be appended to the view container node if it isn't there already.
        </p>
      </td>
    </tr>
  </tbody>
</table>

<p>
A few of App's inherited attributes are given new default values:
</p>

<table>
  <thead>
    <tr>
      <th>Attribute</th>
      <th>Inherited From</th>
      <th>New Default Value</th>
      <th>Reason</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>`container`</td>
      <td>`Y.View`</td>
      <td>`<body>` Node</td>
      <td>
        <p>
        Apps are considered to be full-page by default.
        </p>
      </td>
    </tr>

    <tr>
      <td>`html5`</td>
      <td>`Y.Router`</td>
      <td>auto</td>
      <td>
        <p>
        This value is dependent on the value of `serverRouting` and will default accordingly.
        </p>
      </td>
    </tr>

    <tr>
      <td>`linkSelector`</td>
      <td>`Y.PjaxBase`</td>
      <td>`"a"`</td>
      <td>
        <p>
        By default this selector should match <em>all</em> links on the page because full-page apps are the default.
        </p>
      </td>
    </tr>
  </tbody>
</table>

<h3>Extending `Y.App`</h3>

<p>
The `Y.App` class is intended to be mutable insofar as being the host for <em>all</em> App-component features, whereas `Y.App.Base` is intended to remain pure and just host the basic set of features. This allows for two different ways to extend the functionality of `Y.App`: [[#mixing-in features]], and [[#subclassing]].
</p>

<h4>Mixing-In Features</h4>

<p>
Additional class extensions can be automatically mixed-into `Y.App`, doing so will dynamically extend the functionality of the App class making these new features available to all of its instances and subclasses. The `Y.App.Transitions` class extension, provided by the `app-transitions` module, uses this pattern to add transitions support to `Y.App`.
</p>

```
// Creates the namespace for the transitions class extension and assigns a
// simple constructor function to it.
Y.App.Transitions = function () {};

// This defines the prototype of the transitions class extension, the actual
// implementation has been left out for the sake of simplicity.
Y.App.Transitions.prototype = {

    // The implementation of the transition features would be here.

};

// Here the transitions class extension is being applied automatically by
// mixing itself into the `Y.App` class.
Y.Base.mix(Y.App, [Y.App.Transitions]);
```

<p>
When this module is included in the YUI instance, the transitions support for App can be used by simply toggling it on:
</p>

```
YUI().use('app-base', 'app-transitions', function (Y) {
    var app = new Y.App({transitions: true});
});
```

<p>
When writing your own class extensions to add features to `Y.App`, feel free to add them to App's namespace (e.g., `Y.App.SomeNewFeature`), and be sure to follow these two rules:
</p>

<ol>
  <li>
    <p>
    The addition functionality should be <strong>disabled by default</strong>. The API for the class extensions should provide some way for the user to <em>opt-in</em> to using the features it adds.
    </p>

    <p>
    The `Y.App.Transitions` class extension does this be requiring a "truthy" value for the `transitions` property of the config object passed-in during instance creation.
    </p>
  </li>

  <li>
    <p>
    Be courteous to the other App component class extensions, since they all share the same `prototype` be careful not to unintentionally overwrite other properties or methods.
    </p>
  </li>
</ol>

<h4>Subclassing</h4>

<p>
Creating class extensions for [[#mixing-in features]] to `Y.App` is a great way to extend its functionality in a reusable way while not changing how you [[#Instantiating App|instanciate an App]]; but might find it more useful to extend the `Y.App` class to create a subclass customized to your specific needs.
</p>

<p>
Use the `Y.Base.create()` method to extend `Y.App` and add or override prototype and static members and attributes. You may also optionally specify one or more <a href="../base/index.html#extensions">class extensions</a> to mix into your new class.
</p>

```
// Create a Y.CustomApp class that extends Y.App.
Y.CustomApp = Y.Base.create('customApp', Y.App, [], {
    // Add or override prototype properties and methods here.
}, {
    // Add static properties and methods here.

    ATTRS: {
        // Add or override default attributes here.
    }
});
```

<p>
One benefit of extending `Y.App` is that you can easily add default views, routes, and route handlers to your custom App class, and they'll be shared by all instances of that class unless overridden at the instance level:
</p>

```
// Create a Y.CustomApp class that extends Y.App.
Y.CustomApp = Y.Base.create('customApp', Y.App, [], {
    // Default registered views inherited by all CustomApp instances.
    views: {
        home : {preserve: true},
        users: {preserve: true},
        user : {parent: 'users'}
    },

    // Default route handlers inherited by all CustomApp instances.

    handleHome: function (req) {
        // Handle the "/" route here.
    },

    handleUsers: function (req) {
        // Handle the "/users/" route here.
    },

    handleUser: function (req) {
        // Handle the "/users/:name/" route here.
    }
}, {
    ATTRS: {
        // Share these routes with all CustomApp instances.
        routes: {
            value: [
                {path: '/',             callback: 'handleHome'},
                {path: '/users/',       callback: 'handleUsers'}
                {path: '/users/:name/', callback: 'handleUser'}
            ]
        }
    }
});

// Create a CustomApp instance that inherits the defaults and adds to them.
var app = new Y.CustomApp({
    // Register an additional view. The `home`, `users`, and `user` views will
    // also be inherited.
    views: {
        about: {preserve: true}
    }
});

// Add a route and route handler.
app.route('/about/', function (req) {
    // Handle the '/about/' route here.
});
```

<p>
Now all instances of `Y.CustomApp` will inherit all the custom defaults and can add to or override them. The `app` instance created here will handle the `"/"`, `"/users/"`, and `"/users/:name/"` routes in addition to its own `"/about/"` route.
</p>

<p>
Before you subclass `Y.App`, you should refer to <a href="{{apiDocs}}/modules/app-base.html">App's API docs</a> to become familiar with its public and protected properties and methods.
</p>

<h3>Routing Coordination with Server</h3>
{{! TODO:

  * Note about `html5` default value override.

}}

<h3>Rendering an App</h3>

<p>
App inherits both its `container` attribute and `render()` method from View. Unlike <a href="../view/index.html#rendering-a-view">View's empty `render()` implementation</a>, App provides a default implementation which appends the `activeView` (if there is one) to the `viewContainer` node which itself is appended to the `container` node.
</p>

<p>
The basic usage of your app's `render()` method is to call it at least once, usually after you instantiate your app, this ensures the proper DOM structure is setup to handle rendering the app's [[#View Management|views]].
</p>

```
var app = new Y.App();
app.render();
```

<p>
This results in the HTML of the page looking like this:
</p>

```
<body class="yui3-app">
    ...
    <div class="yui3-app-views"></div>
</body>
```

<p>
By default, an app's `container` node will be the `<body>` element and its `viewContainer` node will be a new `<div>`.
</p>

<p>
<strong>Note:</strong> The `"yui3-app"` and `"yui3-app-views"` CSS classes are added to the `container` and `viewContainer` respectively — this happens when the app is rendered.
</p>

<h4>Specifying Container Nodes</h4>

<p>
When constructing a new App instance you can specify values for the app's `container` and `viewContainer` attributes, and they can even reference the same node.
</p>

```
var app = new Y.App({
    container    : '#wrapper',
    viewContainer: '#wrapper'
});

app.render();
```

<p>
Assuming that a `<div id="wrapper">` node already exists on the page, this uses a CSS selector string to reference the node, assigns it to both containers, and results in the following HTML:
</p>

```
<div id="wrapper" class="yui3-app yui3-app-views">
    ...
</div>
```

<p>
If you specify a `container` that is not already within the markup of the page, you'll need to manually append it to an element that is:
</p>

```
var app = new Y.App({
    container: Y.Node.create('<div id="fancy-app" />')
});

app.render().get('container').appendTo('body');
```

<p>
This results in the HTML of the page looking like this:
</p>

```
<body>
    ...
    <div id="fancy-app" class="yui3-app">
        <div class="yui3-app-views"></div>
    </div>
</body>
```

<p>
Refer to App's API Docs for more details about <a href="{{apiDocs}}/classes/App.html#attr_container">`container`</a> and <a href="/classes/App.html#attr_viewContainer">`viewContainer`</a> attributes.
</p>

<h4>Overriding `render()`</h4>

<p>
You may override the `render()` method to customize how the app renders itself, particularly if you are creating an App subclass.
</p>

<p>
<strong>Note:</strong> You should expect that the `viewContainer`'s contents will be modified by the app for the purpose of rendering the `activeView` when it changes; and ideally your `render()` method should also return `this` at the end to allow chaining, but that's up to you.
</p>

<p>
The following provides a templates for how you could subclass `Y.App` and implement a custom `render()` method while still preserving its default behavior:
</p>

```
Y.CustomApp = Y.Base.create('customApp', Y.App, [], {
    render: function () {
        // This calls the superclass' (Y.App) implementation of the `render()`
        // method to preserve the default behavior.
        Y.CustomApp.superclass.render.apply(this, arguments);

        // Provide your custom rendering logic here.

        // Returns this `Y.CustomApp` instance to allow for chaining.
        return this;
    }
});
```

<p>
Refer to App's API Docs for more details about the <a href="{{apiDocs}}/classes/App.html#method_render">`render()` method</a>.
</p>

<h3>View Management</h3>

<p>
A primary feature of App is its flexible view management, which enables you to declare the primary views of your application and easily switch which one is active. This is very handy for defining your app's top-level "page" views, then switching between them as a user navigates through the application.
</p>

<h4>Declaring Views</h4>

<p>
The `views` property of an App class allows you to specify a mapping of view-names to view-metadata that should be registered to your app. This way you can specify information about your app's views — how they should be treated by the app, and how they related to other views — up-front, in a declarative way that is self-documenting.
</p>

<p>
You can setup this views mapping on both App subclasses and instances. Every App instance will receive its own copy of a `views` object, any `views` metadata defined at the class-level will be used as defaults and merged with any `views` specified during instantiation time.
</p>

<p>
The follow example shows the creation of an App subclass, `CustomApp`, which has a few default views defined, and an instance of `CustomApp` which defines another view and overrides some of the defaults.
</p>

```
// Create a Y.CustomApp class that extends Y.App.
Y.CustomApp = Y.Base.create('customApp', Y.App, [], {
    // Default registered views inherited by all CustomApp instances.
    views: {
        home : {preserve: true},
        users: {preserve: true},
        user : {parent: 'users'}
    }
});

// Create a CustomApp instance that inherits the defaults and adds to them.
var app = new Y.CustomApp({
    // Additional view metadata to be merged with the defaults.
    views: {
        home : {preserve: false},
        user : {preserve: false},
        about: {preserve: true}
    }
});
```

<p>
Using the `getViewInfo()` method, we can see how the `views` metadata from our `CustomView` class and instance were merged together.
</p>

```
// Overwrote "home"'s default `preserve` value.
Y.log(app.getViewInfo('home').preserve);  // => false

// Added `preserve` to "user" view,
// and this did not overwrite the default `parent` value.
Y.log(app.getViewInfo('user').parent);    // => 'home'
Y.log(app.getViewInfo('user').preserve);  // => false

// The specified "about" view was registered.
Y.log(app.getViewInfo('about').preserve); // => true
```

<p>
See the [[#App Properties]] section above for more details on what metadata can be stored for each view in `views` mapping.
</p>

<h4>Switching the Active View</h4>
{{! TODO:

  * Fancy diagram showing header/body/footer screen-regions with the body highlighted. What about an iPhone to pump mobile! Use Omnigraffle!

  * Expand on docs for `showView()` method.

  * Mention `createView()` API is being used.

  * View event bubbling.

}}

<p>
When decomposing an application into discrete user-interfaces, it is natural to think of these as different "pages"—with each one serving a particular role and being the main content on the screen. With the App component, changing the main content/user-interface is done by updating an app's `activeView` attribute via the `showView()` method.
</p>

<p>
Working in concert with an app's registered `views`, the `showView()` method will take a specified view and make it the app's `activeView`. This view will be "attached" to the app by rendering it inside the app's `viewContainer` and any custom events fired by the view will bubble to the app. Any previously active view will be "detached" from the app, removed from the DOM, and either preserved for later use or properly destroyed.
</p>

<p>
The following example is the most basic "Hello World" app:
</p>

```
// Creates a new App and View instance.
var app  = new Y.App(),
    view = new Y.View();

// Overrides the view's `render()` method to render text into its `container`.
view.render = function () {
    this.get('container').set('text', 'Hello World!');
    return this;
};

// Renders the `app` and `view`, then sets the view as the app's `activeView`.
app.render().showView(view.render());

// Verify that `view` is now the `activeView`, and that the view's `container`
// is now rendered within the app's `viewContainer`.
Y.log(app.get('activeView') === view);                           // => true
Y.log(app.get('viewContainer').contains(view.get('container'))); // => true
```

<p>
This results in the HTML of the page looking like this:
</p>

```
<body class="yui3-app">
    ...
    <div class="yui3-app-views">
        <div>Hello World!</div>
    </div>
</body>
```

<p>
This example app can <em>easily</em> become dynamic and have the ability to say hello to someone by name. By creating a reusable `HelloView` class the app can dynamically switch between outputting "Hello World!" and "Hello [name]!" where the "name" is a path segment in the URL.
</p>

```
// Creates a HelloView which can say hello to someone named, or to the World
// if a name is not specified.
Y.HelloView = Y.Base.create('helloView', Y.View, [], {
    render: function () {
        var name = this.get('name');
        this.get('container').set('text', 'Hello ' + (name || 'World') + '!');
        return this;
    }
}, {
    ATTRS: {
        name: {value: null}
    }
});

// Creates a new App instance and registers the HelloView.
var app = new Y.App({
    views: {
        hello: {type: 'HelloView'}
    }
});

// Adds a route handler for "/" to show the HelloView.
app.route('/', function (req) {
    // Sets the `activeView` to a new instance of a `Y.HelloView` by just
    // passing "hello", the name of the registered view.
    this.showView('hello');
});

// Adds a route handler for "/:name" to show the HelloView with a `name`.
app.route('/:name', function (req) {
    // The name which we want to say hello to is specified on `req.params`.
    var name = req.params.name;
    // Sets the `activeView` to a new instance of a `Y.HelloView`, but here
    // we are also passing a config object which the new view instance will
    // be constructed with, and it contains the name which we'll say hello to.
    this.showView('hello', {name: name});
});

// Renders the app, then saves a new history entry for "/eric" which will
// dispatch the "/:name" route handler.
app.render().save('/eric');
```

<p>

<p>
This results in the URL being updated to either `"/eric"` or `"/#/eric"` depending on whether the browser is capable of HTML5 history, and the HTML of the page looking like this:
</p>

```
<body class="yui3-app">
    ...
    <div class="yui3-app-views">
        <div>Hello eric!</div>
    </div>
</body>
```



<p>
Refer to App's API docs</a> for more details about the <a href="{{apiDocs}}/classes/App.html#method_showView">`showView()` method</a>.
</p>

<h3>Navigating Between "Pages"</h3>
{{! TODO:

  * Note about `linkSelector` default value override.

}}

<h2>Best Practices</h2>

<h3>Progressively-Enhanced Apps</h3>

<h3>Client-Only Apps</h3>

<h2>App Extensions</h2>

<h3>`Y.App.Transitions`</h3>

<h2>Apps vs. Widgets</h2>
